#配置日志级别
logging:
  level:
    com.lehe.gateway: debug
    org.springframework.web: info
spring:
  main:
    allow-bean-definition-overriding: true
  redis:
    host: ${redis.host}
    port: 6379
    password: ${redis.password}
  #jwt密码
  security:
    oauth2:
      jwt:
        signingKey: 123456
  cloud:
    gateway:
      locator:
        enabled: true   # 启用服务注册与发现
        lowerCaseServiceId: true  # 将服务名大写转小写
      default-filters:
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY
        - AddResponseHeader=X-Response-Default-Foo, Default-Bar
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 100  #令牌桶的容积
            redis-rate-limiter.burstCapacity: 10  #流速 每秒
            rate-limiter: "#{@defaultRedisRateLimiter}"  #SPEL表达式去的对应的bean
            key-resolver: "#{@remoteAddressKeyResolver}" #SPEL表达式去的对应的bean,"#{@ipKeyResolver}"
management:
  endpoints:
    web:
      exposure:
        include: '*'
#feign的配置，连接超时及读取超时配置
#  启动时，程序会进行包扫描，扫描所有包下所有@FeignClient注解的类，并将这些类注入到spring的IOC容器中。当定义的Feign中的接口被调用时，通过JDK的动态代理来生成RequestTemplate。
#  RequestTemplate中包含请求的所有信息，如请求参数，请求URL等。
#  RequestTemplate声成Request，然后将Request交给client处理，这个client默认是JDK的HTTPUrlConnection，也可以是OKhttp、Apache的HTTPClient等。
#  最后client封装成LoadBaLanceClient，结合ribbon负载均衡地发起调用。
#  注意：
#  由于开启GZIP压缩之后，Feign之间的调用数据通过二进制协议进行传输，返回值需要修改为ResponseEntity<byte[]>才可以正常显示，否则会导致服务之间的调用乱码。
feign:
  #  compression:
  #    request: #请求
  #      enabled: true #开启
  #      mime-types: text/xml,application/xml,application/json #开启支持压缩的MIME TYPE
  #      min-request-size: 2048 #配置压缩数据大小的下限
  #    response: #响应
  #      enabled: true #开启响应GZIP压缩
  client:
    config:
      default:
        connectTimeout: 50000
        readTimeout: 50000
        loggerLevel: BASIC
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  hystrix:
    enabled: true

security:
  oauth2:
    client_id: ${oauth.client_id}
    client_secret: ${oauth.client_secret}
    grant_type: ${oauth.grant_type}
    scope: ${oauth.scope}
    userAuthorizationUri: ${oauth.userAuthorizationUri}
    access-token-uri: ${oauth.access-token-uri}
    userInfoUri: ${oauth.userInfoUri}
    check-token-access: ${oauth.check-token-access}
